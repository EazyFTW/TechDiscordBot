apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.hidetake.ssh'

group = "me.TechsCode"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url 'https://jitpack.io' }

    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    shadow project(":SpigotAPI")

    shadow ('net.dv8tion:JDA:4.1.1_127') {
        exclude module: 'opus-java' //No audio.
    }

    shadow files('libs/ImgurAPI-1.0.0.jar')
    shadow 'org.jsoup:jsoup:1.8.3'
    shadow 'org.apache.commons:commons-lang3:3.7'
    shadow 'mysql:mysql-connector-java:5.1.17'
    shadow 'com.j2html:j2html:1.4.0'
    shadow "com.googlecode.json-simple:json-simple:1.1.1"
    shadow 'com.github.EazyFTW:Ptero4J:0.2.9-BETA'
    shadow 'net.sourceforge.htmlunit:htmlunit:2.29'
}

def props = new Properties()
file("build.properties").withInputStream { props.load(it) }

ssh.remotes {
    server {
        host = props.getProperty("host")
        port = Integer.valueOf(props.getProperty("port"))
        user = props.getProperty("user")
        password = props.getProperty("password")
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
    dryRun = false
}

task uploadBot {
    doLast {
        ssh.run {
            session(ssh.remotes.server) {
                put from: files('build/TechDiscordBot.jar'), into: props.getProperty("location")
            }
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
    }
}

shadowJar {
    archiveName = 'TechDiscordBot.jar'
    destinationDir = file('build')

    dependsOn 'build'
    configurations = [project.configurations.shadow]
}

jar {
    manifest {
        attributes 'Class-Path': '/libs/a.jar'
        attributes 'Main-Class': 'me.TechsCode.TechDiscordBot.TechDiscordBot'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}